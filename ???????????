#include<iostream>
#include<algorithm>
#include <string>
using namespace std;
class list
{
public:
	struct item {
		int val;
		item* next;
		item() {
			val = 0;
			next = nullptr;
		}
		item(int a) {
			val = a;
			next = nullptr;
		}
		~item() {
			delete& val;
			delete& next;
		}
	};
	item* first, * last;
	list() {
		item emt;
		first = &emt;
		last = &emt;
	}
	void push_back(int a) {
		item emt(a);
		(*last).next = &emt;
		last = &emt;
	}
	~list() {
		item* p = first;
		while (p != last) {
			delete p;
		}
		delete& first;
		delete& last;
	}
	void pop_back() {
		item* p = first;
		if (first = last) {
			(*first).val = 0;
			return;
		}
		while ((*p).next != last) {
			p = (*p).next;
		}
		delete (*p).next;
		last = p;
	}
	void pop_front() {
		if (first = last) {
			(*first).val = 0;
			return;
		}
		item* p = first;
		first = (*first).next;
		delete p;
	}
	void delete_next(item* a) {
		if ((*a).next == last) {
			pop_back();
		}
		else {
			(*a).next = (*(*a).next).next;
		}
	}
};
int main() {
	list l;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int a;
		cin >> a;
		l.push_back(a);
	}
	int mn = 1e9;
	for (list::item* p = l.first; p != l.last; p = (*p).next) {
		if ((*p).val < mn) {
			mn = (*p).val;
		}
	}
	for (list::item* p = l.first; p != l.last; ) {
		if ((*(*p).next).val == mn) {
			l.delete_next(p);
		}
		else {
			p = (*p).next;
		}
	}
}
