#define _USE_MATH_DEFINES
#include<iostream>
#include<algorithm>
#include <vector>
#include <fstream>
using namespace std;
ifstream inp("input.txt");
ofstream outp("output.txt");
class point {
public:
	int x, y;
	point() {
		x = 0;
		y = 0;
	}
	point(int x, int y) {
		(*this).x = x;
		(*this).y = y;
	}
	point(const point& p) {
		x = p.x;
		y = p.y;
	}
};
class triangle {
public:
	double a, b, c;
	triangle() {
		a = 0;
		b = 0;
		c = 0;
	}
	triangle(point A, point B, point C) {
		a = sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));
		b = sqrt((B.x - C.x) * (B.x - C.x) + (B.y - C.y) * (B.y - C.y));
		c = sqrt((C.x - A.x) * (C.x - A.x) + (C.y - A.y) * (C.y - A.y));
		if (a > b) {
			swap(a, b);
		}
		if (b > c) {
			swap(b, c);
		}
		if (a > b) {
			swap(a, b);
		}
	}
	triangle(int a, int b) {
		(*this).a = a;
		(*this).b = b;
		(*this).c = b;
		if ((*this).a > (*this).b) {
			swap((*this).a, (*this).b);
		}
		if ((*this).b > (*this).c) {
			swap((*this).b, (*this).c);
		}
		if (a > b) {
			swap((*this).a, (*this).b);
		}
	}
	double p() {
		return a + b + c;
	}
	double s() {
		double p = (*this).p();
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}
	triangle(const triangle& t) {
		a = t.a;
		b = t.b;
		c = t.c;
	}
	bool operator < (triangle b) {
		return p() < b.p();
	}
	bool operator > (triangle b) {
		return p() > b.p();
	}
	bool greater (triangle a, triangle b) {
		return a.p() < b.p();
	}
	bool lower (triangle a, triangle b) {
		return a.p() > b.p();
	}
};
int main() {
	vector<triangle> a(10), b(10), c(10), d(10);
	for (int i = 0; i < 10; i++) {
		int a1, a2, a3, a4, a5, a6;
		inp >> a1 >> a2 >> a3 >> a4 >> a5 >> a6;
		triangle e(point(a1, a2), point(a3, a4), point(a5, a6));
		a[i] = e;
		b[i] = e;
		c[i] = e;
		d[i] = e;
	}
	sort(a.begin(), a.end());
	sort(b.begin(), b.end(), &triangle::greater);
	sort(c.begin(), c.end());
	sort(d.begin(), d.end(), &triangle::greater);
	for (int i = 0; i < 10; i++) {
		outp << a[i].a << ' ' << a[i].b << ' ' << a[i].c << '|';
		outp << b[i].a << ' ' << b[i].b << ' ' << b[i].c << '|';
		outp << c[i].a << ' ' << c[i].b << ' ' << c[i].c << '|';
		outp << d[i].a << ' ' << d[i].b << ' ' << d[i].c << '|';
	}
}
