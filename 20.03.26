#define _USE_MATH_DEFINES
#include<iostream>
#include<algorithm>
using namespace std;
class point {
public:
	int x, y;
	point() {
		x = 0;
		y = 0;
	}
	point(int x, int y) {
		(*this).x = x;
		(*this).y = y;
	}
	point(const point& p) {
		x = p.x;
		y = p.y;
	}
};
class triangle {
public:
	double a, b, c;
	triangle() {
		a = 0;
		b = 0;
		c = 0;
	}
	triangle(point A, point B, point C) {
		a = sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));
		b = sqrt((B.x - C.x) * (B.x - C.x) + (B.y - C.y) * (B.y - C.y));
		c = sqrt((C.x - A.x) * (C.x - A.x) + (C.y - A.y) * (C.y - A.y));
		if (a > b) {
			swap(a, b);
		}
		if (b > c) {
			swap(b, c);
		}
		if (a > b) {
			swap(a, b);
		}
	}
	triangle(int a, int b) {
		(*this).a = a;
		(*this).b = b;
		(*this).c = b;
		if ((*this).a > (*this).b) {
			swap((*this).a, (*this).b);
		}
		if ((*this).b > (*this).c) {
			swap((*this).b, (*this).c);
		}
		if (a > b) {
			swap((*this).a, (*this).b);
		}
	}
	double p() {
		return a + b + c;
	}
	double s() {
		double p = (*this).p();
		return sqrt(p * (p - a) * (p - b) * (p - c));
	}
	triangle(const triangle & t) {
		a = t.a;
		b = t.b;
		c = t.c;
	}
};
class circle {
public:
	int r;
	point c;
	circle() {
		r = 0;
		point c(0, 0);
	}
	circle(point c, double s) {
		(*this).c = c;
		r = sqrt(s / M_PI);
	}
	double len() {
		return 2 * M_PI * r;
	}
	void out() {
		cout << c.x << ' ' << c.y << ' ' << r << ' ';
	}
};
